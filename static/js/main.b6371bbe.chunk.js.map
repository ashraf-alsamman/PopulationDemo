{"version":3,"sources":["Chart.tsx","actions.ts","Search.tsx","Map.tsx","App.tsx","serviceWorker.ts","Reducer.ts","store.ts","index.tsx"],"names":["Chart","data","useSelector","state","chartData","labels","map","a","label","datasets","population","backgroundColor","Math","floor","random","borderWidth","className","style","color","options","plugins","legend","position","font","size","update","type","payload","Regional","value","Search","dispatch","useDispatch","useState","countriesForSelect","setCountriesForSelect","searchedValues","setSearchedValues","selectedValues","setSelectedValues","useEffect","axios","get","response","all_countries","forEach","v","push","name","lat","latlng","lng","console","error","fetchMyAPI","isMulti","onChange","e","undefined","handle","placeholder","CountriesByRegional","fetchRegional","Map","shallowEqual","MapContainer","center","zoom","maxZoom","TileLayer","url","attribution","Marker","key","Tooltip","direction","offset","opacity","permanent","App","Boolean","window","location","hostname","match","initialState","store","createStore","action","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","message"],"mappings":"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","file":"static/js/main.b6371bbe.chunk.js","sourcesContent":["\r\nimport React from 'react';\r\nimport { useSelector } from \"react-redux\";\r\nimport { State } from \"./Reducer\";\r\nimport { Pie } from 'react-chartjs-2';\r\n\r\n\r\n\r\nfunction Chart() {\r\n    //generate colors of countries randomly\r\n    const dynamicColors = function() {\r\n        var r = Math.floor(Math.random() * 255);\r\n        var g = Math.floor(Math.random() * 255);\r\n        var b = Math.floor(Math.random() * 255);\r\n        return \"rgb(\" + r + \",\" + g + \",\" + b + \")\";\r\n      };\r\n      \r\n      const pieOptions = {\r\n           plugins: {\r\n            legend: {\r\n              position: \"bottom\",\r\n      \r\n                labels: {\r\n                    position: \"bottom\",\r\n                    color: '#fff',\r\n                    font: {\r\n                        size: 16,\r\n                    }\r\n                }\r\n            }\r\n       }};\r\n \r\n       const data = useSelector<State, State[\"data\"]>(\r\n        (state) => state.data\r\n      );\r\n       let labels = data.map(a => a.label);\r\n      let population = data.map(a => a.population);\r\n      let dynamicColorsfun = data.map(a => dynamicColors());\r\n     const chartData = {\r\n      labels: labels,\r\n      datasets: [\r\n        {\r\n          label: 'countries populations',\r\n          data: population,\r\n          backgroundColor:  dynamicColorsfun,\r\n          borderWidth: 1,\r\n        },\r\n      ],\r\n    };\r\n  return (\r\n    <>\r\n      <Pie data={chartData} className=\"pie\" style={{color:\"#fff\"}} options={pieOptions}/>\r\n    </>\r\n  );\r\n}\r\n\r\nexport default Chart;\r\n\r\n\r\n\r\n\r\n\r\n\r\n","export type Action = { type: \"UPDATE\"; payload: any[] };\n\nexport const update = (data: any[]): Action => ({\n  type: \"UPDATE\",\n  payload: data,\n});\n","import React, { useState, useEffect} from 'react';\r\nimport { useDispatch } from \"react-redux\";\r\nimport { update } from \"./actions\";\r\nimport axios from \"axios\";\r\nimport Select from 'react-select';\r\n \r\n//Prepare static region title data for selection and make a call to API with this title later\r\nconst Regional = [{value:\"EU\", label:\"European Union\"},{value:\"EFTA\", label:\"European Free Trade Association\"},\r\n{value:\"CARICOM\", label:\"Caribbean Community\"},{value:\"PA\", label:\"Pacific Alliance\"},{value:\"AU\", label:\"African Union\"},\r\n{value:\"USAN\", label:\"Union of South American Nations\"},{value:\"EEU\", label:\"Eurasian Economic Union\"}\r\n,{value:\"AL\", label:\"Arab League\"},{value:\"ASEAN\", label:\"Association of Southeast Asian Nations\"},\r\n{value:\"CAIS\", label:\"Central American Integration System\"},{value:\"CEFTA\", label:\"Central European Free Trade Agreement\"}\r\n,{value:\"NAFTA\", label:\"North American Free Trade Agreement\"},{value:\"SAARC\", label:\"South Asian Association for Regional Cooperation\"}];\r\n\r\n\r\n\r\n\r\nfunction Search() {\r\n\r\n    const dispatch = useDispatch();  \r\n\r\n    const [countriesForSelect, setCountriesForSelect] = useState<any[]>() ;\r\n    const [searchedValues, setSearchedValues] = useState<null>() ;\r\n    const [selectedValues, setSelectedValues] = useState<null>() ;\r\n\r\n    // handle search by country and also clear old search by region \r\n    const  handleChange   = (e:any) => {\r\n        async function handle() {\r\n            dispatch(update([]));\r\n            await setSelectedValues(null);\r\n            await setSearchedValues(undefined);\r\n            await  dispatch(update(e));\r\n        }\r\n        handle();\r\n    }\r\n    // handle search by region and also clear old search by country \r\n   const handleSelectChange = (e:any) => {\r\n                setSelectedValues(undefined);\r\n                setSearchedValues(null);\r\n\r\n                const CountriesByRegional:any[] = [];\r\n\r\n                async function fetchRegional() {\r\n                        try {\r\n                        const response = await axios.get('https://restcountries.eu/rest/v2/regionalbloc/'+e.value);          \r\n                        await    response.data.forEach(function (v:any) {\r\n                        CountriesByRegional.push({ value: v.name, label:v.name, \r\n                        lat:v.latlng[0],lng:v.latlng[1],population:v.population\r\n                        })\r\n                        });\r\n\r\n                        dispatch(update(CountriesByRegional));\r\n\r\n                        } catch (error) {\r\n                        console.error(error);\r\n                        }\r\n                }\r\n                fetchRegional();   \r\n    }\r\n  \r\n    //get all countries from api and save it to state for search by country\r\n    useEffect(() => {\r\n      async function fetchMyAPI() {\r\n        try {\r\n          const response = await axios.get('https://restcountries.eu/rest/v2/all');\r\n   \r\n          const all_countries:any[] = [];\r\n          //Convert the form of the data to fit the work on the map and chart\r\n          response.data.forEach(function (v:any) {\r\n            all_countries.push({ value: v.name, label:v.name, \r\n              lat:v.latlng[0],lng:v.latlng[1],population:v.population\r\n            })\r\n          });\r\n          setCountriesForSelect(all_countries);\r\n        } catch (error) {\r\n          console.error(error);\r\n        }\r\n      }\r\n    \r\n      fetchMyAPI();\r\n    }, [])\r\n  \r\n  \r\n  \r\n\r\n  return (\r\n    <>\r\n        <div className=\"row\">\r\n            <div className=\"col\">\r\n                {/* search by country*/}\r\n                <Select value={searchedValues}  options={countriesForSelect} isMulti onChange={handleChange} placeholder=\"Search By Country\"   />\r\n            </div>\r\n            <div className=\"col\">\r\n                {/* search by region */}\r\n                <Select value={selectedValues}  options={Regional}  onChange={handleSelectChange} placeholder=\"Select By Region\" /> \r\n            </div>\r\n        </div>\r\n    </>\r\n  );\r\n}\r\n\r\nexport default Search;\r\n\r\n\r\n\r\n\r\n\r\n\r\n","\r\nimport React from 'react';\r\nimport { shallowEqual,  useSelector} from \"react-redux\";\r\nimport { State } from \"./Reducer\";\r\nimport { MapContainer, TileLayer, Marker, Tooltip  } from 'react-leaflet';\r\n\r\n \r\n\r\n\r\n\r\nfunction Map() {\r\n       const data = useSelector<State, State[\"data\"]>(\r\n        (state) => state.data ,shallowEqual\r\n      );\r\n    //   setMarkers(data);\r\n \r\n  return (\r\n    <>\r\n            <MapContainer\r\n                className=\"markercluster-map\"\r\n                center={[0, 0]}\r\n                zoom={1}\r\n                maxZoom={18}\r\n              >\r\n                <TileLayer\r\n                  url=\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\" attribution='&copy; <a href=\"http://osm.org/copyright\">OpenStreetMap</a> contributors'\r\n                />\r\n                         {/* loop to get markers from redux updated by search by country or by region */}\r\n                        {data?.map(v => (\r\n                        <Marker position={[v.lat, v.lng]} key={v.lng}  >   \r\n                            <Tooltip direction='right' offset={[-8, -2]} opacity={1} permanent> <span>{v.label} </span></Tooltip>\r\n                        </Marker>\r\n                        ))   }\r\n\r\n          </MapContainer>\r\n\r\n    </>\r\n  );\r\n}\r\n\r\nexport default Map;\r\n\r\n\r\n\r\n\r\n\r\n\r\n","import React from 'react';\nimport Chart from \"./Chart\";\nimport Search from \"./Search\"; \nimport Map from \"./Map\"; \n\n function App() {\n  \n  return (\n    <>\n        <div className=\"container\">\n              <h2 className=\"glow\">Population Statistics</h2>\n                <Search />\n              <div className=\"row container data-con\">\n                <div className=\"col-5\"> <Chart /> </div>\n                <div  className=\"col-7\"> <Map /> </div>\n              </div>\n        </div>\n    </>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import { Action } from \"./actions\"\n\nexport interface State {\n  data: any[]\n}\n\nconst initialState = {\n  data: []\n}\n\nexport const Reducer = (state:State = initialState, action: Action) => {\n  switch(action.type){\n    case \"UPDATE\": {\n      return {...state, data: [ ...action.payload ]}\n    }\n    default:\n      return state\n  }\n}","import { createStore } from 'redux'\nimport {Reducer} from './Reducer'\n\nexport const store = createStore(Reducer)","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport {Provider} from \"react-redux\"\nimport {store} from './store'\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}